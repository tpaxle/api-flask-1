name: CI feature

on:
  push:
    branches: [ feature/**, fix/**, develop, feat/** ]

env:
  PROJECT_NAME: api-flask-1
  REGISTRY: "registry.global.ccc.srvb.can.paas.cloudcenter.corp"
  REGISTRY_PROJECT: "ccc-alm"
  PROXY_ENABLE: true
  http_proxy: "http://proxyapps.gsnet.corp:80"
  https_proxy: "http://proxyapps.gsnet.corp:80"
  no_proxy: ".corp,127.0.0.1,localhost"
  PRERELEASE: ${{ secrets.PRERELEASE }}
jobs:
  ci_feature:
    runs-on: almmc_redhat_runner # linux-platform, ubuntu-latest

    steps:
    - name: "Checkout Origin"
      uses: actions/checkout@v2

    - name: Configuring pipenv
      run: |
        pipenv install --dev
        pipenv run pip install pre-commit

    - name: "Check Precommits - Testing"
      run: |
        pipenv run pre-commit run --hook-stage push -v
  cd_feature:
    runs-on: almmc_redhat_runner # linux-platform, ubuntu-latest
    needs: ci_feature
    environment: pre_environment

    steps:
    - name: "Checkout Origin"
      if: env.PRERELEASE
      uses: actions/checkout@v2

    - uses: chrisdickinson/setup-yq@latest
      if: env.PRERELEASE
      with:
        yq-version: 2.4.1
        yq-url: https://github.com/mikefarah/yq/releases/download/{version}/yq_{platform}_amd64

    - name: Add SHORT_SHA env property with commit short sha
      if: env.PRERELEASE
      run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

    - name: Checking new version
      if: env.PRERELEASE
      id: tag_version
      uses: mathieudutour/github-tag-action@v5.1
      with:
        github_token: ${{ secrets.ACTIONS_TOKEN }}
        append_to_pre_release_tag: ${{ env.SHORT_SHA }}
        dry_run: true

    - name: Login to Harbor
      if: env.PRERELEASE
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_TOKEN }}

    - name: Build and push Docker  ${{ env.REGISTRY }}/${{ env.REGISTRY_PROJECT }}/${{ env.PROJECT_NAME }}:${{ steps.tag_version.outputs.new_version }}
      if: env.PRERELEASE
      id: docker_build
      run: |
        docker build -f .github/dockerfile/Dockerfile -t ${{ env.REGISTRY }}/${{ env.REGISTRY_PROJECT }}/${{ env.PROJECT_NAME }}:${{ steps.tag_version.outputs.new_tag }} .
        docker push ${{ env.REGISTRY }}/${{ env.REGISTRY_PROJECT }}/${{ env.PROJECT_NAME }}:${{ steps.tag_version.outputs.new_tag }}

    - name: Create package Helm
      if: env.PRERELEASE
      env:
        CHART_VERSION: ${{ steps.tag_version.outputs.new_tag }}
      run: |
        helm plugin install https://github.com/chartmuseum/helm-push.git || true
        helm repo add --username ${{ secrets.REGISTRY_USERNAME }} --password ${{ secrets.REGISTRY_TOKEN }}  myrepo https://${{env.REGISTRY}}/chartrepo/${{env.REGISTRY_PROJECT}} --insecure-skip-tls-verify --force-update
        helm pull myrepo/`yq read .github/helm/values.yaml template.package` --version `yq read .github/helm/values.yaml template.version` --untar --insecure-skip-tls-verify
        mv `yq read .github/helm/values.yaml template.package` ${{env.PROJECT_NAME}}
        sed -i.bak "s#name: `yq read .github/helm/values.yaml template.package`#name: $PROJECT_NAME#"  $PROJECT_NAME/Chart.yaml
        yq merge -a -x -i $PROJECT_NAME/values.yaml .github/helm/values.yaml
        yq write $PROJECT_NAME/values.yaml image.tag $CHART_VERSION -i
        yq write $PROJECT_NAME/Chart.yaml version $CHART_VERSION -i
        yq write $PROJECT_NAME/Chart.yaml appversion $CHART_VERSION -i
        helm push ./$PROJECT_NAME/ myrepo --insecure

    - name: Install CLI tools
      if: env.PRERELEASE
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: "3"

    - name: OpenShift Login
      if: env.PRERELEASE
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url:     ${{ secrets.OC_URL }}
        openshift_token:          ${{ secrets.OC_TOKEN }}
        insecure_skip_tls_verify: true
    - name: Install Chart ${{ env.PROJECT_NAME }}-${{ steps.tag_version.outputs.new_tag }} in Pre environment
      if: env.PRERELEASE
      env:
        CHART_VERSION: ${{ steps.tag_version.outputs.new_tag }}
      run: |
        helm repo add --username ${{ secrets.REGISTRY_USERNAME }} --password ${{ secrets.REGISTRY_TOKEN }}  myrepo https://${{env.REGISTRY}}/chartrepo/${{env.REGISTRY_PROJECT}} --insecure-skip-tls-verify --force-update
        helm upgrade --install ${{ env.PROJECT_NAME }}-test myrepo/${{env.PROJECT_NAME}} --version $CHART_VERSION \
          --insecure-skip-tls-verify \
          -n ${{secrets.OC_NAMESPACE}} \
          --set replicaCount=1 \
          --set namespace=${{secrets.OC_NAMESPACE}} \
          --set secrets.BBDD_HOST=${{ secrets.BBDD_HOST }} \
          --set secrets.BBDD_PORT=${{ secrets.BBDD_PORT }} \
          --set secrets.BBDD_USER=${{ secrets.BBDD_USER }} \
          --set secrets.BBDD_PASS=${{ secrets.BBDD_PASS }} \
          --set secrets.BBDD_NAME=${{ secrets.BBDD_NAME }} \
          --set secrets.LDAP_HOST=${{ secrets.LDAP_HOST }} \
          --set secrets.LDAP_USER=${{ secrets.LDAP_USER }} \
          --set secrets.LDAP_PASS=${{ secrets.LDAP_PASS }} \
          --set secrets.LDAP_API_HOST=${{ secrets.LDAP_API_HOST }} \
          --set secrets.LDAP_API_AUTH=${{ secrets.LDAP_API_AUTH }} \
          --set secrets.JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
          --set secrets.SWAGGER_BASEPATH=/apiusertest2 \
          --set secrets.CHART_VERSION=$CHART_VERSION \
          --set secrets.APM_ENABLED=${{ secrets.APM_ENABLED }} \
          --set secrets.APM_SERVERTOKEN=${{ secrets.APM_SERVERTOKEN }} \
          --set secrets.APM_SERVERURL=${{ secrets.APM_SERVERURL }} \
          --set secrets.APM_ENV=PRETEST \
          --history-max 2
